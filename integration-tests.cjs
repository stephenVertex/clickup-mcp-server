#!/usr/bin/env node

/**
 * –ü–û–õ–ù–û–¶–ï–ù–ù–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ ClickUp MCP OAuth2 –°–ï–†–í–ï–†–ê
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ ‚Üí 2. –ß—Ç–µ–Ω–∏–µ ‚Üí 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Üí 4. –£–¥–∞–ª–µ–Ω–∏–µ
 *
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:
 * - Workspace & Spaces
 * - Folders
 * - Lists
 * - Tasks
 * - Comments
 *
 * –í—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–π OAuth2 —Ç–æ–∫–µ–Ω –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
 */

const http = require('http');

const BASE_URL = 'http://localhost:3007';
const TEST_TOKEN = 'test-token'; // –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ClickUp —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
  dim: '\x1b[2m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message, color = 'cyan') {
  log(`${step} ${message}`, color);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è MCP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, data, headers = {}) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);

    const defaultHeaders = {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData),
      'Authorization': `Bearer ${TEST_TOKEN}`,
      'MCP-Protocol-Version': '2025-06-18'
    };

    const options = {
      method: 'POST',
      headers: { ...defaultHeaders, ...headers }
    };

    const urlObj = new URL(url);
    options.hostname = urlObj.hostname;
    options.port = urlObj.port;
    options.path = urlObj.pathname;

    const req = http.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsed
          });
        } catch (e) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: responseData
          });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.write(postData);
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
async function callTool(toolName, args = {}) {
  const response = await makeRequest(`${BASE_URL}/`, {
    jsonrpc: '2.0',
    method: 'tools/call',
    id: Math.floor(Math.random() * 10000),
    params: {
      name: toolName,
      arguments: args
    }
  });

  if (response.statusCode === 200 && response.data.result) {
    return JSON.parse(response.data.result.content[0].text);
  } else if (response.data.error) {
    throw new Error(`${toolName}: ${response.data.error.message}`);
  } else {
    throw new Error(`${toolName}: Unexpected response - ${JSON.stringify(response.data)}`);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö ID
let testContext = {
  workspaceId: null,
  spaceId: null,
  folderId: null,
  listId: null,
  taskId: null,
  commentId: null
};

// === –§–ê–ó–ê 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
async function testInitialization() {
  log('\n' + '='.repeat(60), 'bold');
  log('üìã –§–ê–ó–ê 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´', 'bold');
  log('='.repeat(60), 'bold');

  try {
    // –¢–µ—Å—Ç 1.1: MCP Initialize
    logStep('üîß', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...');
    const initResponse = await makeRequest(`${BASE_URL}/`, {
      jsonrpc: '2.0',
      method: 'initialize',
      id: 1,
      params: {}
    });

    if (initResponse.statusCode === 200 && initResponse.data.result) {
      log('   ‚úÖ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'green');
      log(`   üì° –í–µ—Ä—Å–∏—è: ${initResponse.data.result.protocolVersion}`, 'dim');
      log(`   üè∑Ô∏è  –°–µ—Ä–≤–µ—Ä: ${initResponse.data.result.serverInfo?.name}`, 'dim');
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP');
    }

    // –¢–µ—Å—Ç 1.2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    logStep('üõ†Ô∏è ', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...');
    const toolsResponse = await makeRequest(`${BASE_URL}/`, {
      jsonrpc: '2.0',
      method: 'tools/list',
      id: 2,
      params: {}
    });

    if (toolsResponse.statusCode === 200 && toolsResponse.data.result) {
      const tools = toolsResponse.data.result.tools || [];
      log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${tools.length}`, 'green');

      const categories = {
        user: tools.filter(t => t.name.includes('user') || t.name.includes('workspace')).length,
        list: tools.filter(t => t.name.includes('list')).length,
        task: tools.filter(t => t.name.includes('task')).length,
        folder: tools.filter(t => t.name.includes('folder')).length,
        comment: tools.filter(t => t.name.includes('comment')).length
      };

      log(`   üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/Workspace: ${categories.user}`, 'dim');
      log(`   üìã –°–ø–∏—Å–∫–∏: ${categories.list}`, 'dim');
      log(`   üìù –ó–∞–¥–∞—á–∏: ${categories.task}`, 'dim');
      log(`   üìÅ –ü–∞–ø–∫–∏: ${categories.folder}`, 'dim');
      log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${categories.comment}`, 'dim');
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
    }

    return true;
  } catch (error) {
    log(`   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'red');
    return false;
  }
}

// === –§–ê–ó–ê 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–ó–û–í–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ===
async function testBasicInfo() {
  log('\n' + '='.repeat(60), 'bold');
  log('üë§ –§–ê–ó–ê 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–ó–û–í–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò', 'bold');
  log('='.repeat(60), 'bold');

  try {
    // –¢–µ—Å—Ç 2.1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    logStep('üë§', '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
    const user = await callTool('clickup_get_user');
    testContext.userId = user.user?.id;
    log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.user?.username || user.user?.email}`, 'green');
    log(`   üÜî ID: ${user.user?.id}`, 'dim');

    // –¢–µ—Å—Ç 2.2: –°–ø–∏—Å–æ–∫ workspaces
    logStep('üè¢', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ workspaces...');
    const workspaces = await callTool('clickup_get_workspaces');
    if (workspaces.teams && workspaces.teams.length > 0) {
      testContext.workspaceId = workspaces.teams[0].id;
      log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ workspaces: ${workspaces.teams.length}`, 'green');
      log(`   üè∑Ô∏è  –í—ã–±—Ä–∞–Ω workspace: "${workspaces.teams[0].name}" (ID: ${testContext.workspaceId})`, 'dim');
    } else {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ workspace');
    }

    // –¢–µ—Å—Ç 2.3: –°–ø–∏—Å–æ–∫ spaces –≤ workspace
    logStep('üåå', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ spaces...');
    const spaces = await callTool('clickup_get_spaces', { workspace_id: testContext.workspaceId });
    if (spaces.spaces && spaces.spaces.length > 0) {
      testContext.spaceId = spaces.spaces[0].id;
      log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ spaces: ${spaces.spaces.length}`, 'green');
      log(`   üè∑Ô∏è  –í—ã–±—Ä–∞–Ω space: "${spaces.spaces[0].name}" (ID: ${testContext.spaceId})`, 'dim');
    } else {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ space');
    }

    return true;
  } catch (error) {
    log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`, 'red');
    return false;
  }
}

// === –§–ê–ó–ê 3: –°–û–ó–î–ê–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô ===
async function testEntityCreation() {
  log('\n' + '='.repeat(60), 'bold');
  log('üèóÔ∏è  –§–ê–ó–ê 3: –°–û–ó–î–ê–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô', 'bold');
  log('='.repeat(60), 'bold');

  const timestamp = new Date().toISOString();

  try {
    // –¢–µ—Å—Ç 3.1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    logStep('üìÅ', '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏...');
    const folder = await callTool('clickup_create_folder', {
      space_id: testContext.spaceId,
      name: `üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ ${timestamp}`
    });
    testContext.folderId = folder.id;
    log(`   ‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${folder.name}`, 'green');
    log(`   üÜî ID –ø–∞–ø–∫–∏: ${testContext.folderId}`, 'dim');

    await sleep(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    // –¢–µ—Å—Ç 3.2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    logStep('üìã', '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞...');
    const list = await callTool('clickup_create_list', {
      space_id: testContext.spaceId,
      name: `üìù –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ ${timestamp}`,
      content: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP OAuth2 —Å–µ—Ä–≤–µ—Ä–∞'
    });
    testContext.listId = list.id;
    log(`   ‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω: ${list.name}`, 'green');
    log(`   üÜî ID —Å–ø–∏—Å–∫–∞: ${testContext.listId}`, 'dim');

    await sleep(1000);

    // –¢–µ—Å—Ç 3.3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    logStep('üìù', '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏...');
    const task = await callTool('clickup_create_task', {
      list_id: testContext.listId,
      name: `üéØ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ${timestamp}`,
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ CRUD —Ü–∏–∫–ª–∞',
      status: 'open'
    });
    testContext.taskId = task.id;
    log(`   ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${task.name}`, 'green');
    log(`   üÜî ID –∑–∞–¥–∞—á–∏: ${testContext.taskId}`, 'dim');

    await sleep(1000);

    // –¢–µ—Å—Ç 3.4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    logStep('üí¨', '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ...');
    const comment = await callTool('clickup_create_task_comment', {
      task_id: testContext.taskId,
      comment_text: `üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.\n\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${timestamp}\n\n–≠—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —É–¥–∞–ª—ë–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`
    });
    testContext.commentId = comment.id;
    log(`   ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω`, 'green');
    log(`   üÜî ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${testContext.commentId}`, 'dim');

    return true;
  } catch (error) {
    log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: ${error.message}`, 'red');
    return false;
  }
}

// === –§–ê–ó–ê 4: –ß–¢–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê ===
async function testEntityReading() {
  log('\n' + '='.repeat(60), 'bold');
  log('üëÄ –§–ê–ó–ê 4: –ß–¢–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –°–£–©–ù–û–°–¢–ï–ô', 'bold');
  log('='.repeat(60), 'bold');

  try {
    // –¢–µ—Å—Ç 4.1: –ß—Ç–µ–Ω–∏–µ –ø–∞–ø–∫–∏
    logStep('üìÅ', '–ß—Ç–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏...');
    const folder = await callTool('clickup_get_folder', { folder_id: testContext.folderId });
    log(`   ‚úÖ –ü–∞–ø–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞: ${folder.name}`, 'green');
    log(`   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(parseInt(folder.date_created)).toLocaleString()}`, 'dim');

    await sleep(500);

    // –¢–µ—Å—Ç 4.2: –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    logStep('üìã', '–ß—Ç–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞...');
    const list = await callTool('clickup_get_list', { list_id: testContext.listId });
    log(`   ‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω: ${list.name}`, 'green');
    log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${list.content || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`, 'dim');
    log(`   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${list.task_count} –∑–∞–¥–∞—á`, 'dim');

    await sleep(500);

    // –¢–µ—Å—Ç 4.3: –ß—Ç–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    logStep('üìù', '–ß—Ç–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...');
    const task = await callTool('clickup_get_task', { task_id: testContext.taskId });
    log(`   ‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞: ${task.name}`, 'green');
    log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`, 'dim');
    log(`   üè∑Ô∏è  –°—Ç–∞—Ç—É—Å: ${task.status?.status || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 'dim');

    await sleep(500);

    // –¢–µ—Å—Ç 4.4: –ß—Ç–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ
    logStep('üìã', '–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ...');
    const tasks = await callTool('clickup_get_tasks', { list_id: testContext.listId });
    const taskCount = tasks.tasks ? tasks.tasks.length : 0;
    log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ: ${taskCount}`, 'green');
    if (taskCount > 0) {
      log(`   üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: ${tasks.tasks[0].name}`, 'dim');
    }

    await sleep(500);

    // –¢–µ—Å—Ç 4.5: –ß—Ç–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    logStep('üí¨', '–ß—Ç–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–µ...');
    const comments = await callTool('clickup_get_task_comments', { task_id: testContext.taskId });
    const commentCount = comments.comments ? comments.comments.length : 0;
    log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${commentCount}`, 'green');
    if (commentCount > 0) {
      const firstComment = comments.comments[0];
      log(`   üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${firstComment.comment_text.substring(0, 50)}...`, 'dim');
    }

    return true;
  } catch (error) {
    log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: ${error.message}`, 'red');
    return false;
  }
}

// === –§–ê–ó–ê 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï ===
async function testEntityUpdating() {
  log('\n' + '='.repeat(60), 'bold');
  log('‚úèÔ∏è  –§–ê–ó–ê 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô', 'bold');
  log('='.repeat(60), 'bold');

  const updateTimestamp = new Date().toISOString();

  try {
    // –¢–µ—Å—Ç 5.1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
    logStep('üìÅ', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏...');
    await callTool('clickup_update_folder', {
      folder_id: testContext.folderId,
      name: `üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–∞–ø–∫–∞ ${updateTimestamp}`
    });
    log(`   ‚úÖ –ü–∞–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, 'green');

    await sleep(1000);

    // –¢–µ—Å—Ç 5.2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    logStep('üìã', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞...');
    await callTool('clickup_update_list', {
      list_id: testContext.listId,
      name: `üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ${updateTimestamp}`,
      content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ö–æ–¥–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    });
    log(`   ‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω`, 'green');

    await sleep(1000);

    // –¢–µ—Å—Ç 5.3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    logStep('üìù', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
    await callTool('clickup_update_task', {
      task_id: testContext.taskId,
      name: `üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ${updateTimestamp}`,
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —Ö–æ–¥–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°—Ç–∞—Ç—É—Å —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω.',
      status: 'in progress'
    });
    log(`   ‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, 'green');

    await sleep(1000);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    logStep('üîç', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');

    const updatedList = await callTool('clickup_get_list', { list_id: testContext.listId });
    log(`   üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞: ${updatedList.name}`, 'dim');

    const updatedTask = await callTool('clickup_get_task', { task_id: testContext.taskId });
    log(`   üìù –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${updatedTask.name}`, 'dim');
    log(`   üè∑Ô∏è  –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${updatedTask.status?.status || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 'dim');

    return true;
  } catch (error) {
    log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: ${error.message}`, 'red');
    return false;
  }
}

// === –§–ê–ó–ê 6: –£–î–ê–õ–ï–ù–ò–ï ===
async function testEntityDeletion() {
  log('\n' + '='.repeat(60), 'bold');
  log('üóëÔ∏è  –§–ê–ó–ê 6: –£–î–ê–õ–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô', 'bold');
  log('='.repeat(60), 'bold');

  try {
    // –¢–µ—Å—Ç 6.1: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    logStep('üìù', '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
    await callTool('clickup_delete_task', { task_id: testContext.taskId });
    log(`   ‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ (ID: ${testContext.taskId})`, 'green');

    await sleep(1000);

    // –¢–µ—Å—Ç 6.2: –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    logStep('üìã', '–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞...');
    await callTool('clickup_delete_list', { list_id: testContext.listId });
    log(`   ‚úÖ –°–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω (ID: ${testContext.listId})`, 'green');

    await sleep(1000);

    // –¢–µ—Å—Ç 6.3: –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
    logStep('üìÅ', '–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏...');
    await callTool('clickup_delete_folder', { folder_id: testContext.folderId });
    log(`   ‚úÖ –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ (ID: ${testContext.folderId})`, 'green');

    await sleep(1000);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    logStep('üîç', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...');

    try {
      await callTool('clickup_get_task', { task_id: testContext.taskId });
      log(`   ‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ –≤—Å—ë –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ)`, 'yellow');
    } catch (e) {
      log(`   ‚úÖ –ó–∞–¥–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${e.message}`, 'green');
    }

    try {
      await callTool('clickup_get_list', { list_id: testContext.listId });
      log(`   ‚ö†Ô∏è  –°–ø–∏—Å–æ–∫ –≤—Å—ë –µ—â—ë –¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ)`, 'yellow');
    } catch (e) {
      log(`   ‚úÖ –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}`, 'green');
    }

    return true;
  } catch (error) {
    log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: ${error.message}`, 'red');
    return false;
  }
}

// === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
async function runFullIntegrationTests() {
  const startTime = Date.now();

  log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–¶–ï–ù–ù–´–• –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í', 'bold');
  log('=' .repeat(60), 'bold');
  log(`üì° –°–µ—Ä–≤–µ—Ä: ${BASE_URL}`, 'blue');
  log(`üîë –¢–æ–∫–µ–Ω: ${TEST_TOKEN}`, 'blue');
  log(`‚è∞ –ù–∞—á–∞–ª–æ: ${new Date().toLocaleString()}`, 'blue');

  const results = {
    phases: 6,
    passed: 0,
    failed: 0,
    errors: []
  };

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const phases = [
    { name: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', func: testInitialization },
    { name: '–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', func: testBasicInfo },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π', func: testEntityCreation },
    { name: '–ß—Ç–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π', func: testEntityReading },
    { name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π', func: testEntityUpdating },
    { name: '–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π', func: testEntityDeletion }
  ];

  for (const phase of phases) {
    try {
      const success = await phase.func();
      if (success) {
        results.passed++;
        log(`\n‚úÖ –§–∞–∑–∞ "${phase.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`, 'green');
      } else {
        results.failed++;
        results.errors.push(`–§–∞–∑–∞ "${phase.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏`);
        log(`\n‚ùå –§–∞–∑–∞ "${phase.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏`, 'red');
      }
    } catch (error) {
      results.failed++;
      results.errors.push(`–§–∞–∑–∞ "${phase.name}": ${error.message}`);
      log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ "${phase.name}": ${error.message}`, 'red');
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏
    await sleep(2000);
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  const endTime = Date.now();
  const duration = Math.round((endTime - startTime) / 1000);

  log('\n' + '='.repeat(60), 'bold');
  log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bold');
  log('='.repeat(60), 'bold');

  log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`, 'blue');
  log(`üìà –§–∞–∑ –≤—Å–µ–≥–æ: ${results.phases}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`, 'red');

  const successRate = Math.round((results.passed / results.phases) * 100);
  const color = successRate >= 80 ? 'green' : successRate >= 60 ? 'yellow' : 'red';
  log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, color);

  if (results.errors.length > 0) {
    log('\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', 'red');
    results.errors.forEach((error, index) => {
      log(`   ${index + 1}. ${error}`, 'red');
    });
  }

  if (results.failed === 0) {
    log('\nüéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
    log('üèÜ ClickUp MCP OAuth2 —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!', 'green');
  } else {
    log(`\n‚ö†Ô∏è  ${results.failed} —Ñ–∞–∑ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∏–∑ ${results.phases}`, 'yellow');
    log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'yellow');
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
  log('\nüìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', 'blue');
  Object.entries(testContext).forEach(([key, value]) => {
    if (value) {
      log(`   ${key}: ${value}`, 'dim');
    }
  });

  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runFullIntegrationTests().catch(error => {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    console.error(error);
    process.exit(1);
  });
}

module.exports = { runFullIntegrationTests, callTool };